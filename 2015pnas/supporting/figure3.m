% figure3.m  Generate Figure 3 in Pritchett and Murray (2015)%            i.e., experiment 1, model selection via cross validationclear; clc;figure(1); clf;% initializeaddpath(fullfile(pwd,'tools'));  % add tool folder to pathassertstats;                     % check for the statistics toolbox% choose subject (subject = 1, 2, or 3)subject = 1;fname = sprintf('data/experiment1_subject%d.txt',subject);fprintf('processing %s\n',fname);% load data and select columnstrials = load(fname,'-ascii');signal = trials(:,3);           % signal order:  1 = white disk first, 2 = black disk firstsigcst = trials(:,6);           % signal contrastrngseeds = trials(:,[ 4 5 ]);   % random number generator seedsresponse = trials(:,7);         % observer response:  1 = judged white disk first, 2 = judged black disk firstntrials = size(trials,1);       % number of trials% set parametersnblocks = 10;  % number of cross-validation blocksmodellist = { 'diff', 'diffg', 'ddetect', 'single1', 'single2' };  % list of models% divide trials randomly into cross validation blocks; blocknum(i) indicates which block trial i belongs toblocknum = mod( 1:ntrials, nblocks )+1;blocknum = blocknum(randperm(ntrials));% initialize negative log likelihoods of observer's responsesnll = NaN( numel(modellist), nblocks );% step through modelsfor modeli = 1:numel(modellist)        % get current model    model = modellist{modeli};    fprintf('  cross-validating model ''%s''\n',model);        % step through cross-validation blocks    for blocki = 1:nblocks        fprintf('    block %d of %d ...\n',blocki,nblocks);                % choose trials for training and validation        traini = (blocknum~=blocki);        vali =   (blocknum==blocki);                % calculate radially pooled classification image from training trials        cimage = calcclass_experiment1( signal(traini), response(traini), rngseeds(traini,:), subject );                % calculate proxy decision variables on all trials        [ dvar1, dvar2 ] = calcdvar_experiment1( signal, sigcst, rngseeds, cimage );                % create response matrix from training trials        dspace = calcdspace( dvar1(traini), dvar2(traini), response(traini) );                % fit model to proxy decision space        [ param, pmat ] = fitgddloop( dspace, model );                % show proxy decision space and fit        figure(1);        plotdspace( dspace, param );        title(sprintf('subject %d, model ''%s'', block %d',subject,model,blocki));        drawnow;                % get proxy decision variables and responses on validation trials        vdvar1 = dvar1(vali);        % proxy decision variable 1        vdvar2 = dvar2(vali);        % proxy decision variable 2        vresponse = response(vali);  % observer's response                % initialize response probabilities on validation trials        rprob = NaN(numel(vdvar1),1);                % step through validation trials        for t = 1:numel(vdvar1)                        % find closest values of proxy decision variables in fitted model            [~,j] = min( abs( vdvar1(t) - dspace.dlist ) );            [~,i] = min( abs( vdvar2(t) - dspace.dlist ) );                        % find probability of observer's response according to fitted model            if vresponse(t)==2                rprob(t) = pmat(i,j);            else                rprob(t) = 1-pmat(i,j);            end                    end                % find summed negative log likelihood of observer's responses on        % validation trials according to fitted model        nll(modeli,blocki) = -sum(log( rprob ));            end    end% average negative log likelihoods across cross-validation blocksnllmean = mean( nll, 2 )';% average negative log likelihoods across 'single1' and 'single2' modelsnllmean = [ nllmean(1:3) mean(nllmean(4:5)) ];% plot average negative log likelihood for all modelsfigure(2); clf;bar( nllmean );set(gca,'XTickLabel',{ 'difference', 'difference+guess', 'double detection', 'single interval' });set(gca,'YLim',[ 400 550 ],'FontSize',14);xlabel 'model'ylabel 'negative log likelihood of validation responses'title(sprintf('cross-validation results for subject %d',subject));% add error barsnllstderr = std( nll, 0, 2 )'/sqrt(nblocks);          % find standard error of meannllstderr = [ nllstderr(1:3) mean(nllstderr(4:5)) ];  % average standard deviations across 'single1' and 'single2' modelshold on;errorbar(1:4,nllmean,nllstderr,'ro','Marker','.');hold off;