function mat = bpnoise2d( n, fmin, fmax )% BPNOISE2D  Make a sample of 2D bandpass noise%%     usage:  mat = bpnoise2d( n, fmin, fmax )% %     n    -- the size of the sample (n x n)%     fmin -- the lower frequency cutoff (cycles/object)%     fmax -- the upper frequency cutoff (cycles/object)% check Nyquist limitif fmax>n/2    warning('upper frequency cutoff exceeds Nyquist limit');end% make an odd-sized sample of unit-variance conjugate-symmetric noiseoddn=2*floor((n-1)/2)+1;ft=randn(oddn)+sqrt(-1)*randn(oddn);ft=0.5*(ft+rot90(conj(ft),2));% add unit-variance real border for even-sized imagesif 2*round(n/2)==n    ft=[ randn(1,n) ; randn(oddn,1) ft ];end% make unit-energy Fourier-domain maskij=(1:n)-(floor(n/2)+1);[imat,jmat]=meshgrid(ij,ij);d2=imat.^2 + jmat.^2;fmask=(d2>=fmin^2)&(d2<=fmax^2);fmask=fmask/sqrt(sum(fmask(:).^2));% filterft=ft.*fmask;% take inverse Fourier transformmat=(n^2)*real(ifft2(ifftshift(ft)));return